<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://joluva.github.io/showcase/docs/visual-Illusions/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://joluva.github.io/showcase/docs/visual-Illusions/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://joluva.github.io/showcase/docs/visual-Illusions/Coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joluva.github.io/showcase/docs/visual-Illusions/Coloring/</guid><description>Coloring # Color blindness # Imagen Original # Simulando el daltonismo # Para éstos ejercicios decidimos trabajar sobre los dicromatismos, debido a que es el tipo de daltonismo más común, y son los cuales se pueden simular y corregir con mayor exactitud.
Protanopia # La protanopia es el tipo de daltonismo en el cual no funcionan los conos que perciben las ondas electromagnéticas largas que representan el rojo.
Deuteranopia # La deuteranopia es el tipo de daltonismo en el cual no funcionan los conos que perciben las ondas electromagnéticas medianas que representan el verde.</description></item><item><title/><link>https://joluva.github.io/showcase/docs/visual-Illusions/MachBands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joluva.github.io/showcase/docs/visual-Illusions/MachBands/</guid><description>Mach Bands # Terrain with Perlin noise # Ejercicio 3 # Implementación de Perlin Noise:
Implementación propia: Se busca emular un terreno existente</description></item><item><title/><link>https://joluva.github.io/showcase/docs/visual-Illusions/Spatial-Coherence-/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joluva.github.io/showcase/docs/visual-Illusions/Spatial-Coherence-/</guid><description>Spacial Coherence # Pixelator Demo # Ejercicio
A continuación se implementa una aplicación de video pixelador y se realiza una evaluación comparativa de los resultados (promedio de color frente a coherencia espacial). Y se evaluará cobre la calidad visual de los resultados. Introducción # El pixelado de videos es una técnica utilizada para ocultar o difuminar ciertas partes de una imagen en movimiento. Esta técnica se basa en la reducción del tamaño de los píxeles que componen la imagen, lo que resulta en una apariencia borrosa y poco clara de la parte de la imagen pixelada.</description></item><item><title/><link>https://joluva.github.io/showcase/docs/visual-Illusions/Temporal-Coherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joluva.github.io/showcase/docs/visual-Illusions/Temporal-Coherence/</guid><description> Temporal Coherence # Ejercicio 9 #</description></item><item><title/><link>https://joluva.github.io/showcase/docs/visual-Illusions/Depth-perception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joluva.github.io/showcase/docs/visual-Illusions/Depth-perception/</guid><description>Depth Perception # Biocular cues # Ejercicio 10 # Problema # Implemente un sketch en 2D que engañe al ojo para hacerlo percibir imágenes en 3D
Introducción # El paralaje de movimiento es un efecto visual que se produce cuando un observador se mueve en relación a un objeto o entorno, lo que causa un cambio en la posición aparente de los objetos cercanos y lejanos en relación al observador.</description></item></channel></rss>